/** Calcule le nombre de composantes connexes dans l'image binaire.
 * @param Original L'image dans laquelle on doit compter les composantes connexes.
 * @param BackGround Couleur du fond, donc tout ce qui n'est pas des composantes.
 * @param EightConnex Booleen qui permet de savoir si le calcul se fait en quatre ou huit connexites.
 * @param Chrono Le chronometre pour mesurer la duree.
 * @return Le nombre de composantes connexes de l'image.*/
public int Label(BufferedImage Original, int BackGround, boolean EightConnex, Chronometer Chrono)
	{
	if ( ImageTools.isColored(Original) ) throw new IllegalArgumentException("Only binary or gray level images supported.") ;
 
	this.source = Original ;
	int i, j, x, y, Color, marker = 0 ;
	int largeur = Original.getWidth() ;
	int hauteur = Original.getHeight() ;
	int Trouve1, Trouve2, Equi1, Equi2 ;
	boolean Fin = true ;
	WritableRaster wr = Original.getRaster() ;
 
	if ( Chrono != null )
		{
		System.out.print("Number of connected components computation with iterative algorithm: ") ;
		marker = Chrono.setMarker() ;
		}
 
	Labels = null ;
	Labels = new int[hauteur][largeur] ;
 
	ComposanteIdentiques = null ;
	ComposanteIdentiques = new int[Increment] ;
	ArraysOperations.SetConstant(ComposanteIdentiques, 0) ;
 
	for (i=0 ; i < hauteur ; i++)
		for (j=0 ; j < largeur ; j++)
			if ( wr.getSample(j, i, 0) == BackGround ) Labels[i][j] = 0 ;
			else Labels[i][j] = -1 ;
 
	Counter = 0 ;
	for (i=0 ; i < hauteur ; i++)
		for (j=0 ; j < largeur ; j++)
			if ( Labels[i][j] == -1 )
				{
				Color = wr.getSample(j, i, 0) ;
				Trouve1 = Trouve2 = 0 ; // On vérifie les deux voisins
 
				if ( (i > 0) && (wr.getSample(j, i-1, 0) == Color) ) // Au dessus
					Trouve1 = Labels[i-1][j] ;
				if ( (j > 0) && (wr.getSample(j-1, i, 0) == Color) ) // A gauche
					Trouve2 = Labels[i][j-1] ;
 
				if ( EightConnex ) // Si on compte en huit connexité
					{
					if ( (i > 0) && (j > 0) && (Trouve1 == 0) && (wr.getSample(j-1, i-1, 0) == Color) ) Trouve1 = Labels[i-1][j-1] ;
					else if ( (i > 0) && (j > 0) && (Trouve2 == 0) && (wr.getSample(j-1, i-1, 0) == Color) ) Trouve2 = Labels[i-1][j-1] ;
					else if ( (i > 0) && (j < largeur-1) && (Trouve1 ==0) && (wr.getSample(j+1, i-1, 0) == Color) ) Trouve1 = Labels[i-1][j+1] ;
					else if ( (i > 0) && (j < largeur-1) && (Trouve2 ==0) && (wr.getSample(j+1, i-1, 0) == Color) ) Trouve2 = Labels[i-1][j+1] ;
					}
 
				if ( (Trouve1 == 0) && (Trouve2 == 0) ) /* Aucun voisin n'est bon */
					Labels[i][j] = ++Counter ;
 
				if ( (Trouve1 != 0) && (Trouve2 == 0) ) /* Un seul des deux */
					Labels[i][j] = Trouve1 ;
				if ( (Trouve1 == 0) && (Trouve2 != 0) )
					Labels[i][j] = Trouve2 ;
 
				if ( (Trouve1 != 0) && (Trouve2 != 0) && (Trouve1 == Trouve2) ) /* Meme composante voisine */
					Labels[i][j] = Trouve1 ;
 
				if ( (Trouve1 != 0) && (Trouve2 != 0) && (Trouve1 != Trouve2) ) /* Tous les deux differents */
					{
					Fin = false ;
					Equi1 = TrouverEquivalence(Trouve1) ; /* On cherche l'origine de la composante */
					Equi2 = TrouverEquivalence(Trouve2) ;
					if ( (Equi1 < Equi2) || ((Equi1 == Equi2) && (Trouve1 < Trouve2)) )
						{
						Labels[i][j] = Equi1 ;
						ComposanteIdentiques[Trouve2] = Equi1 ;
						}
					else
						{
						Labels[i][j] = Equi2 ;
						ComposanteIdentiques[Trouve1] = Equi2 ;
						}
					}
				}
 
	while ( Fin == false ) /* On reactualise les equivalences */
			{
			Fin = true ;
			if ( Counter > ComposanteIdentiques.length ) IncreaseAlloc(Counter) ;
			for (i=1 ; i <= Counter ; i++)
				if ( ComposanteIdentiques[i] != 0 ) /* Il a un equivalent */
					if ( (ComposanteIdentiques[ComposanteIdentiques[i]] != 0) /* Si le prede...  a aussi un equivalent */
						&& (ComposanteIdentiques[ComposanteIdentiques[i]] != ComposanteIdentiques[i]) )
						{
						Fin = false ;
						ComposanteIdentiques[i] = ComposanteIdentiques[ComposanteIdentiques[i]] ;
						}
			}
 
	for (i=0 ; i < hauteur ; i++) /* On remet les bonnes valeurs */
		for (j=0 ; j < largeur ; j++)
			if ( Labels[i][j] > 0 )
				{
				if ( Labels[i][j] >= ComposanteIdentiques.length ) IncreaseAlloc(Labels[i][j]) ;
				if (ComposanteIdentiques[Labels[i][j]] != 0 )
					Labels[i][j] = ComposanteIdentiques[ Labels[i][j] ] ;
				}
 
	for (i=0 ; i <= Counter ; i++) /* On reinitialise */
		ComposanteIdentiques[i] = 0 ;
 
	for (i=0 ; i < hauteur ; i++) /* On note les composantes trouves */
		for (j=0 ; j < largeur ; j++)
			if ( Labels[i][j] > 0 ) ComposanteIdentiques[ Labels[i][j] ] = 1 ;
 
	Trouve1 = 0 ;
	for (i=1 ; i <= Counter ; i++) /* On renumerote les composantes trouves de maniere consecutive dans l'ordre */
		if ( ComposanteIdentiques[i] == 1 )
			ComposanteIdentiques[i] = ++Trouve1 ;
 
	for (i=0 ; i < hauteur ; i++) /* On les remplaces par les nouveaux numeros */
		for (j=0 ; j < largeur ; j++)
			if ( (Labels[i][j] > 0) && (ComposanteIdentiques[Labels[i][j]] != 0) )
				Labels[i][j] = ComposanteIdentiques[ Labels[i][j] ] ;
 
	Counter = Trouve1 ;
 
 
	Sizes = null ; // On remplit le tableau Sizes.
	Sizes = new int[Counter+1] ;
	for (y=0 ; y < hauteur ; y++)
		for (x=0 ; x < largeur ; x++)
			if ( Labels[y][x] > 0 )
				Sizes[Labels[y][x]]++ ;
 
	if ( Chrono != null )
		{
		System.out.println(Chrono.getTimeSinceMarker(marker)) ;
		Chrono.FreeMarker(marker) ;
		}
 
	return Counter ;
	}
 